<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>GCP on ESCAPE FROM / iganari</title><link>https://iganari.github.io/categories/gcp/</link><description>Recent content in GCP on ESCAPE FROM / iganari</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Mon, 27 Jul 2020 00:00:00 +0000</lastBuildDate><atom:link href="https://iganari.github.io/categories/gcp/index.xml" rel="self" type="application/rss+xml"/><item><title>Serverless NEG を試す ~Cloud RUN, App Engine, Cloud Functions の準備~</title><link>https://iganari.github.io/blog/2020-07-27_try-serverless-neg-01/</link><pubDate>Mon, 27 Jul 2020 00:00:00 +0000</pubDate><guid>https://iganari.github.io/blog/2020-07-27_try-serverless-neg-01/</guid><description>構成 この記事の内容は長いため複数の記事に跨って作成しています。
適宜、興味のある記事を参照して下さい。
Serverless NEG とは? &amp;lt;本記事&amp;gt; Cloud RUN, App Engine, Cloud Functions の準備 サブドメインの設定 External HTTP(S) Load Balancer の作成 リソースの削除 事前準備 GCP との認証をします。 gcloud auth login -q GCP コマンドのため、環境変数を設定しておきます。 ### New Setting export _pj_id='Your GCP Project ID' export _common='check-serverless-neg' サンプルコードをダウンロードし、本記事のサンプルコードが格納しているディレクトリに移動します。 cd [Your WorkSpace] git clone https://github.com/iganari/package-gcp.git cd package-gcp/compute/networkendpointgroups/serverless やること Serverless NEG の backend に設定する Cloud RUN, App Engine, Cloud Functions の準備をします。 Cloud Run のサンプルの準備 Cloud Run のサンプルコードがあるディレクトリに移動します。 cd cloudrun Cloud Run 上で使用するコンテナイメージを Google Container Registry (GCR) にデプロイします。 gcloud builds submit --tag gcr.</description></item><item><title>Serverless NEG を試す ~External HTTP(S) Load Balancer の作成~</title><link>https://iganari.github.io/blog/2020-07-27_try-serverless-neg-03/</link><pubDate>Mon, 27 Jul 2020 00:00:00 +0000</pubDate><guid>https://iganari.github.io/blog/2020-07-27_try-serverless-neg-03/</guid><description>構成 この記事の内容は長いため複数の記事に跨って作成しています。
適宜、興味のある記事を参照して下さい。
Serverless NEG とは? Cloud RUN, App Engine, Cloud Functions の準備 サブドメインの設定 &amp;lt;本記事&amp;gt; External HTTP(S) Load Balancer の作成 リソースの削除 事前準備 GCP との認証をします。 gcloud auth login -q GCP コマンドのため、環境変数を設定しておきます。 ### New Setting export _pj_id='Your GCP Project ID' export _common='check-serverless-neg' サンプルコードをダウンロードし、本記事のサンプルコードが格納しているディレクトリに移動します。 cd [Your WorkSpace] git clone https://github.com/iganari/package-gcp.git cd package-gcp/compute/networkendpointgroups/serverless やること External HTTP(S) Load Balancer の作成します。 External HTTP(S) Load Balancer の作成 各種の Serverless NEG を作成する Cloud Run の Serverless NEG を作成する gcloud beta compute network-endpoint-groups create ${_common}-serverless-neg-run \ --region=asia-northeast1 \ --network-endpoint-type=SERVERLESS \ --cloud-run-service=${_common}-run App Engine の Serverless NEG を作成する gcloud beta compute network-endpoint-groups create ${_common}-serverless-neg-app \ --region=asia-northeast1 \ --network-endpoint-type=SERVERLESS \ --app-engine-service=${_common}-app Cloud Functions の Serverless NEG を作成する gcloud beta compute network-endpoint-groups create ${_common}-serverless-neg-func \ --region=asia-northeast1 \ --network-endpoint-type=SERVERLESS \ --cloud-function-name=func 作成した NEG を確認します。 :warning: 2020年7月現在は、GCP コンソール上では確認することが出来ません(※ β版) gcloud beta compute network-endpoint-groups list ### 例 # gcloud beta compute network-endpoint-groups list NAME LOCATION ENDPOINT_TYPE SIZE check-serverless-neg-serverless-neg-app asia-northeast1 SERVERLESS 0 check-serverless-neg-serverless-neg-func asia-northeast1 SERVERLESS 0 check-serverless-neg-serverless-neg-run asia-northeast1 SERVERLESS 0 各種の Backend Service を作成する Cloud Run 用の Backend Service を作成します。 gcloud compute backend-services create ${_common}-backend-service-run \ --global App Engine 用の Backend Service を作成します。 gcloud compute backend-services create ${_common}-backend-service-app \ --global Cloud Functions 用の Backend Service を作成します。 gcloud compute backend-services create ${_common}-backend-service-func \ --global Backend Service を確認します。 gcloud compute backend-services list ### 例 # gcloud compute backend-services list NAME BACKENDS PROTOCOL check-serverless-neg-backend-service-app HTTP check-serverless-neg-backend-service-func HTTP check-serverless-neg-backend-service-run HTTP Backend Service に Cloud Run 用の Serverless NEG を設定する Cloud Run 用の Backend Service に Cloud Run 用の Serverless NEG を設定します。 gcloud beta compute backend-services add-backend ${_common}-backend-service-run \ --global \ --network-endpoint-group=${_common}-serverless-neg-run \ --network-endpoint-group-region=asia-northeast1 App Engine 用の Backend Service に App Engine 用の Serverless NEG を設定します。 gcloud beta compute backend-services add-backend ${_common}-backend-service-app \ --global \ --network-endpoint-group=${_common}-serverless-neg-app \ --network-endpoint-group-region=asia-northeast1 Cloud Functions 用の Backend Service に Cloud Functions 用の Serverless NEG を設定します。 gcloud beta compute backend-services add-backend ${_common}-backend-service-func \ --global \ --network-endpoint-group=${_common}-serverless-neg-func \ --network-endpoint-group-region=asia-northeast1 Backend Service を確認します。 gcloud compute backend-services list ### Ex.</description></item><item><title>Serverless NEG を試す ~Serverless NEG とは?~</title><link>https://iganari.github.io/blog/2020-07-27_try-serverless-neg-00/</link><pubDate>Mon, 27 Jul 2020 00:00:00 +0000</pubDate><guid>https://iganari.github.io/blog/2020-07-27_try-serverless-neg-00/</guid><description>構成 この記事の内容は長いため複数の記事に跨って作成しています。
適宜、興味のある記事を参照して下さい。
&amp;lt;本記事&amp;gt; Serverless NEG とは? Cloud RUN, App Engine, Cloud Functions の準備 サブドメインの設定 External HTTP(S) Load Balancer の作成 リソースの削除 やること Serverless Network Endpoint Groups の概要を把握します
Serverless NEG とは? 正式名称は Serverless Network Endpoint Groups です。
GCP には Network Endpoint Group (NEG) という機能があり、 Zonal Network Endpoint Groups と Internet Network Endpoint Groups という 2 種類の NEG がありました。
2020/07/08 に GCP のサーバレスなコンポーネントに対応した NEG の Beta 版が出ました。
リリースノート https://cloud.</description></item><item><title>Serverless NEG を試す ~サブドメインの設定~</title><link>https://iganari.github.io/blog/2020-07-27_try-serverless-neg-02/</link><pubDate>Mon, 27 Jul 2020 00:00:00 +0000</pubDate><guid>https://iganari.github.io/blog/2020-07-27_try-serverless-neg-02/</guid><description>構成 この記事の内容は長いため複数の記事に跨って作成しています。
適宜、興味のある記事を参照して下さい。
Serverless NEG とは? Cloud RUN, App Engine, Cloud Functions の準備 &amp;lt;本記事&amp;gt; サブドメインの設定 External HTTP(S) Load Balancer の作成 リソースの削除 事前準備 GCP との認証をします。 gcloud auth login -q GCP コマンドのため、環境変数を設定しておきます。 ### New Setting export _pj_id='Your GCP Project ID' export _common='check-serverless-neg' サンプルコードをダウンロードし、本記事のサンプルコードが格納しているディレクトリに移動します。 cd [Your WorkSpace] git clone https://github.com/iganari/package-gcp.git cd package-gcp/compute/networkendpointgroups/serverless やること External HTTP(S) Load Balancer で使用するサブドメインの準備をします。 静的 IP アドレスの準備 静的 IP アドレスを確保します。 gcloud compute addresses create ${_common}-example-ip \ --ip-version=IPV4 \ --global 確保した静的 IP アドレスを確認します。 gcloud compute addresses describe ${_common}-example-ip \ --format=&amp;quot;get(address)&amp;quot; \ --global ### 例 # gcloud compute addresses describe ${_common}-example-ip \ &amp;gt; --format=&amp;quot;get(address)&amp;quot; \ &amp;gt; --global 34.</description></item><item><title>Serverless NEG を試す ~リソースの削除~</title><link>https://iganari.github.io/blog/2020-07-27_try-serverless-neg-04/</link><pubDate>Mon, 27 Jul 2020 00:00:00 +0000</pubDate><guid>https://iganari.github.io/blog/2020-07-27_try-serverless-neg-04/</guid><description>構成 この記事の内容は長いため複数の記事に跨って作成しています。
適宜、興味のある記事を参照して下さい。
Serverless NEG とは? Cloud RUN, App Engine, Cloud Functions の準備 サブドメインの設定 External HTTP(S) Load Balancer の作成 &amp;lt;本記事&amp;gt; リソースの削除 事前準備 GCP との認証をします。 gcloud auth login -q GCP コマンドのため、環境変数を設定しておきます。 ### New Setting export _pj_id='Your GCP Project ID' export _common='check-serverless-neg' サンプルコードをダウンロードし、本記事のサンプルコードが格納しているディレクトリに移動します。 cd [Your WorkSpace] git clone https://github.com/iganari/package-gcp.git cd package-gcp/compute/networkendpointgroups/serverless やること ここまでに作成してきたリソースを削除します。 リソースの削除 gcloud compute forwarding-rules delete ${_common}-https-content-rule --global gcloud compute target-https-proxies delete ${_common}-https-proxy gcloud compute ssl-certificates delete ${_common}-www-ssl-cert gcloud compute url-maps remove-path-matcher ${_common}-url-map --path-matcher-name=${_common}-path-matcher gcloud compute url-maps delete ${_common}-url-map gcloud compute backend-services delete ${_common}-backend-service --global gcloud beta compute network-endpoint-groups delete ${_common}-serverless-neg --region=asia-northeast1 gcloud compute addresses delete ${_common}-example-ip --global まとめ これでリソースの削除も完了です!</description></item><item><title>Multi Cli を作りました [日本語版]</title><link>https://iganari.github.io/blog/2020-02-02_create-multi-cli.ja/</link><pubDate>Sun, 02 Feb 2020 00:00:00 +0000</pubDate><guid>https://iganari.github.io/blog/2020-02-02_create-multi-cli.ja/</guid><description>注意点 この記事は下記の記事のアーカイブです ;)
https://iganari.hatenablog.com/entry/2020/02/02/193227 Multi Cli を作りました 成果物 https://github.com/iganari/multi-cli
どんなものか (今の所) AWS、Azure、GCP のCLI をコンテナ上で使えるようにします。 これにより、ホストマシンの環境を必要以上に汚すことはありません。 Docker Compose を用いることで、常時起動をより簡易にしています。 docker コマンドの -d でも出来ますが、管理の工数が増えるため、Docker Compose を使用しました。 さくっと CLI を使いたい時に重宝します(多分) CLI を使いたいけど、Cloud Shell を起動するのもめんどいし…な時など!!(あるのか??) 使用方法 Repository を Clone し、docker-compose コマンドで実行します。 cd {Your work directory} git clone https://github.com/iganari/multi-cli.git cd multi-cli docker-compose up -d ### 例 $ docker-compose up -d Creating multi-cli-azure .</description></item></channel></rss>